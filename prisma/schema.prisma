generator client {
  provider = "prisma-client-js"
  seed = "tsx prisma/seed.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderType {
  OFFLINE
  ONLINE
}

enum OrderStatus {
  PENDING
  PAID
  PROCESSING
  COMPLETED
  CANCELLED
}

enum PaymentType {
  GOPAY
  SHOPEEPAY
  QRIS
  CASH
}

model Role {
  id         Int      @id @default(autoincrement())
  name       String   @db.VarChar(255)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  users      User[]
}

model User {
  id           Int      @id @default(autoincrement())
  role_id      Int
  name         String   @db.VarChar(255)
  email        String   @unique @db.VarChar(255)
  username     String   @unique @db.VarChar(255)
  password     String   @db.VarChar(255)
  phone_number String   @unique @db.VarChar(20)
  is_active    Boolean  @default(true)
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  deleted_at   DateTime? 

  role         Role     @relation(fields: [role_id], references: [id])
  passwordResetTokens PasswordResetToken[]
  refreshTokens RefreshToken[]
  orders        Order[]
}

model PasswordResetToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String
  expires_at DateTime
  is_used    Boolean  @default(false)
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  user       User     @relation(fields: [user_id], references: [id])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  user_id    Int
  token      String
  expires_at DateTime
  is_active  Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime?

  user       User     @relation(fields: [user_id], references: [id])
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  is_active   Boolean   @default(true)
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  deleted_at  DateTime?

  products    Product[]
}

model Product {
  id          Int       @id @default(autoincrement())
  category_id Int?
  name        String
  description String?
  image_url   String?
  cost        Decimal    @db.Decimal(10, 2)
  price       Decimal    @db.Decimal(10, 2)
  is_active   Boolean    @default(true)
  created_at  DateTime   @default(now())
  updated_at  DateTime   @updatedAt
  deleted_at  DateTime?

  category    Category?  @relation(fields: [category_id], references: [id])
  recipes      ProductRecipe[] 
  orderItems   OrderProductItem[]
}

model Addon {
  id           Int           @id @default(autoincrement())
  name         String
  description  String?
  cost         Decimal       @db.Decimal(10, 2)
  price        Decimal       @db.Decimal(10, 2)
  is_active    Boolean       @default(true)
  created_at   DateTime      @default(now())
  updated_at   DateTime      @updatedAt
  deleted_at   DateTime?

  recipes      AddonRecipe[]
  orderAddonItems OrderAddonItem[]
}

model Inventory {
  id           Int         @id @default(autoincrement())
  name         String
  quantity     Decimal     @db.Decimal(10, 2) @default(0)
  unit         String
  min_quantity Decimal     @db.Decimal(10, 2)
  is_active    Boolean     @default(true)
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  deleted_at   DateTime?

  purchases    Purchase[]
  productRecipes ProductRecipe[]
  addonRecipes   AddonRecipe[]
}

model Purchase {
  id           Int        @id @default(autoincrement())
  inventory_id Int
  quantity     Decimal    @db.Decimal(10, 2)
  total        Decimal?   @db.Decimal(12, 2)
  purchase_date DateTime  @default(now())
  is_active    Boolean    @default(true)
  created_at   DateTime   @default(now())
  updated_at   DateTime   @updatedAt
  deleted_at   DateTime?  

  inventory    Inventory  @relation(fields: [inventory_id], references: [id], onDelete: Cascade)
}

model ProductRecipe {
  id            Int        @id @default(autoincrement())
  product_id    Int
  inventory_id  Int
  quantity_used Decimal    @db.Decimal(10, 2)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  product       Product    @relation(fields: [product_id], references: [id])
  inventory     Inventory  @relation(fields: [inventory_id], references: [id])
}

model AddonRecipe {
  id            Int        @id @default(autoincrement())
  addon_id      Int
  inventory_id  Int
  quantity_used Decimal    @db.Decimal(10, 2)
  is_active     Boolean    @default(true)
  created_at    DateTime   @default(now())
  updated_at    DateTime   @updatedAt
  deleted_at    DateTime?

  addon         Addon      @relation(fields: [addon_id], references: [id])
  inventory     Inventory  @relation(fields: [inventory_id], references: [id])
}

model Order {
  id            Int                @id @default(autoincrement())
  user_id       Int
  order_trx_id  String             @unique
  order_date    DateTime           @default(now())
  order_type    OrderType          @default(OFFLINE)
  order_status  OrderStatus        @default(PENDING)
  total_amount  Decimal            @db.Decimal(12, 2)
  notes         String?
  is_active     Boolean            @default(true)
  created_at    DateTime           @default(now())
  updated_at    DateTime           @updatedAt
  deleted_at    DateTime?

  user          User               @relation(fields: [user_id], references: [id])
  items         OrderProductItem[]
  payments      Payment[]
}

model OrderProductItem {
  id          Int              @id @default(autoincrement())
  order_id    Int
  product_id  Int
  subtotal    Decimal          @db.Decimal(10, 2)
  is_active   Boolean          @default(true)
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  deleted_at  DateTime?

  order       Order            @relation(fields: [order_id], references: [id])
  product     Product          @relation(fields: [product_id], references: [id])
  addons      OrderAddonItem[]
}

model OrderAddonItem {
  id                    Int              @id @default(autoincrement())
  order_product_item_id Int
  addon_id              Int
  quantity              Int              @default(1)
  price                 Decimal          @db.Decimal(10, 2)
  is_active             Boolean          @default(true)
  created_at            DateTime         @default(now())
  updated_at            DateTime         @updatedAt
  deleted_at            DateTime?

  order_product_item    OrderProductItem @relation(fields: [order_product_item_id], references: [id])
  addon                 Addon            @relation(fields: [addon_id], references: [id])
}

model Payment {
  id              Int          @id @default(autoincrement())
  order_id        Int
  payment_trx_id  String?
  payment_type    PaymentType
  trx_status      String?
  trx_time        DateTime?
  paid_amount     Decimal      @db.Decimal(10, 2)
  is_active       Boolean      @default(true)
  create_at       DateTime     @default(now())
  update_at       DateTime     @updatedAt
  delete_at       DateTime?
  
  order           Order        @relation(fields: [order_id], references: [id])
}